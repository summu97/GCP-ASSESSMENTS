ONE:
gcloud iam service-accounts create admin-access --description="full-admin" --display-name="admin-access"
gcloud iam service-accounts create limited-access --description="limited-admin" --display-name="limited-access"
gcloud projects add-iam-policy-binding ringed-hallway-417305 --member=serviceAccount:admin-access@ringed-hallway-417305.iam.gserviceaccount.com --role=roles/owner
gcloud projects add-iam-policy-binding ringed-hallway-417305 --member=serviceAccount:limited-access@ringed-hallway-417305.iam.gserviceaccount.com --role=roles/editor

2. gcloud command(s) to create the Instance Group, Instances (2) using above SA(s), having disk size of 1Tb and startup script installing tomcat, python and apache


#!/bin/bash

# Create admin instance
gcloud compute instances create admin-instance \
    --project ringed-hallway-417305 \
    --machine-type n1-standard-4 \
    --zone us-east1-b \
    --service-account admin-access@ringed-hallway-417305.iam.gserviceaccount.com \
    --image ubuntu-2204-jammy-v20240319 \
    --image-project ubuntu-os-cloud \
    --boot-disk-size 1TB \
    --boot-disk-auto-delete \
    --scopes https://www.googleapis.com/auth/compute

# Create limited instance
gcloud compute instances create limited-instance \
    --project ringed-hallway-417305 \
    --machine-type n1-standard-4 \
    --zone us-east1-b \
    --service-account limited-access@ringed-hallway-417305.iam.gserviceaccount.com \
    --image ubuntu-2204-jammy-v20240319 \
    --image-project ubuntu-os-cloud \
    --boot-disk-size 1TB \
    --boot-disk-auto-delete \
    --scopes https://www.googleapis.com/auth/compute

# Create unmanaged instance group
gcloud compute instance-groups unmanaged create custom-instance-group --zone=us-east1-b

# Add instances to the unmanaged instance group
gcloud compute instance-groups unmanaged add-instances custom-instance-group --instances=admin-instance,limited-instance --zone=us-east1-b

# Installing python3
sudo apt update
sudo apt install python3 -y

# Installing apache
sudo apt install apache2 -y

# Installing Tomcat
sudo apt install default-jdk -y
wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.88/bin/apache-tomcat-9.0.88.tar.gz
tar -zxvf apache-tomcat-9.0.88.tar.gz
sed -i '56  a\<role rolename="manager-gui"/>' apache-tomcat-9.0.88/conf/tomcat-users.xml
sed -i '57  a\<role rolename="manager-script"/>' apache-tomcat-9.0.88/conf/tomcat-users.xml
sed -i '58  a\<user username="tomcat" password="tomcat" roles="manager-gui, manager-script"/>' apache-tomcat-9.0.88/conf/tomcat-users.xml
sed -i '59  a\</tomcat-users>' apache-tomcat-9.0.88/conf/tomcat-users.xml
sed -i '56d' apache-tomcat-9.0.88/conf/tomcat-users.xml
sed -i '21d' apache-tomcat-9.0.88/webapps/manager/META-INF/context.xml
sed -i '22d'  apache-tomcat-9.0.88/webapps/manager/META-INF/context.xml
sh apache-tomcat-9.0.88/bin/startup.sh

#PASSWORD=USERNAME=tomcat


THREE:
gsutil mb -c NEARLINE -p public -l us-central1 -p ringed-hallway-417305 -b on gs://adq-bucket-dev-getteam
gsutil iam ch serviceAccount:sumanth@ringed-hallway-417305.iam.gserviceaccount.com:roles/storage.admin gs://adq-bucket-dev-getteam
gsutil iam ch serviceAccount:sumanth@ringed-hallway-417305.iam.gserviceaccount.com:roles/storage.objectUser gs://adq-bucket-dev-getteam

4. gcloud commands to create single instance , and attaching the persistant disk(s) of size 512 gb and 1 tb disk (Drive Letter : D & E).


Create persistent disk of 512gb:
gcloud compute disks create disk-d --size=512GB --zone=us-east1-b

Create persistent disk of 1TB:
gcloud compute disks create disk-e --size=1TB --zone=us-east1-b

Creating vm and attaching disks:
gcloud compute instances create custom-vm --project ringed-hallway-417305 --machine-type=n1-standard-4 --zone=us-east1-b --service-account=limited-access@ringed-hallway-417305.iam.gserviceaccount.com --image=ubuntu-2204-jammy-v20240319 --image-project=ubuntu-os-cloud --boot-disk-size=10GB --boot-disk-auto-delete --scopes=https://www.googleapis.com/auth/compute --disk=name=disk-512gb,device-name=disk-d --disk=name=disk-1tb,device-name=disk-e


ASSESSMENT2:
ONE:
pipeline {
    agent any
    tools {
        maven 'maven' // Use the name configured in Jenkins
    }
    stages {
        stage('checkout') {
            steps {
                git 'https://github.com/summu97/monolythic-project.git'
            }
        }
        stage('package') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('store war to bucket') {
            steps {
                googleStorageUpload bucket: 'gs://sumanth-war-bucket', credentialsId: 'json-key', pattern: 'target/*.war'
            }
        }
        stage('Download war') {
            steps {
                googleStorageDownload bucketUri: 'gs://sumanth-war-bucket/target/NETFLIX-1.2.2.war', credentialsId: 'json-key', localDirectory: '.', pathPrefix: 'target/'
            }
        }
        stage('Deploy to tomcat') {
            steps {
                deploy adapters: [tomcat9(credentialsId: 'tomcat', path: '', url: 'http://35.231.207.223:8080/')], contextPath: 'netflix', war: '*.war'
            }
        }
    }
}

TWO:
pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                script {
                    def gitInfo = checkout([$class: 'GitSCM', branches: [[name: '*/${branch}']], userRemoteConfigs: [[url: 'https://github.com/summu97/react.js.git']]])
                    def branchName = gitInfo.GIT_BRANCH.tokenize('/')[1]
                    echo "Branch name: ${branchName}"
                }
            }
        }
        stage('building code') {
            steps {
                sh '''
                npm install
                npm run build
                '''
            }
        }
        stage('creating zip') {
            steps {
                script {
                    def version = "1.${env.BUILD_NUMBER}"
                    def gitInfo = checkout([$class: 'GitSCM', branches: [[name: '*/${branch}']], userRemoteConfigs: [[url: 'https://github.com/summu97/react.js.git']]])
                    def branchName = gitInfo.GIT_BRANCH.tokenize('/')[1]
                    def fileName = branchName == 'master' ? 'package_release' : 'package_snapshot'
                    fileName += "_${version}.zip"
                    sh "zip -r ${fileName} build/"
                }
            }
        }
    }
}
